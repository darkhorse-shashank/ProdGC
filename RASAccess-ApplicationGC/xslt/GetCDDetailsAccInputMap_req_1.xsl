<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/GetCDDetailsAccInputMap_req_1.map" md5sum="af369351a115600df7010f4942c31d9e" version="8.0.501" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM Graphical Data Mapping Editor.
*   Version 8.0.5.0
*
*   Mapping file:		GetCDDetailsAccInputMap_req_1.map
*   Map declaration(s):	GetCDDetailsAccInputMap_req_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FGCDomain-v1.0.0%252Forg%252Ftataaig%252Faccess%252FRetrieveAccessGC%257DfindCdDetailsAccRequestMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252Fstub.tagicesb.com%252Fwsdl%252FRASGenericService%252F%257DfetchCDDetailsRAS/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io6="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:in5="wsdl.http://GCDomain-v1.0.0/org/tataaig/access/RetrieveAccessGC"
    xmlns:in="http://GCDomain-v1.0.0/org/tataaig/access/RetrieveAccessGC"
    xmlns:io="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:in2="http://RACASBO"
    xmlns:io2="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:in4="http://GCLibrary/org/aig/access/BO"
    xmlns:io5="http://www.w3.org/2003/05/soap-envelope"
    xmlns:in3="http://GCLibrary/org/aig/access/bo"
    xmlns:io4="http://www.w3.org/2005/08/addressing"
    xmlns:out2="http://stub.tagicesb.com/wsdl/RASHealthService/"
    xmlns:out3="WebService_RefundDetails"
    xmlns:out4="WebService_RefundCancellationDtls"
    xmlns:out5="http://stub.tagicesb.com/wsdl/RASGenericService/"
    xmlns:out6="wsdl.http://stub.tagicesb.com/wsdl/RASGenericService/"
    xmlns:out="WebService_AccRefundRequest"
    xmlns:map="http://RASAccess-ApplicationGC/xslt/GetCDDetailsAccInputMap_req_1"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="date str exsl set math map xalan msl"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'out6:fetchCDDetailsRAS'"/>
            </xsl:attribute>
            <xsl:call-template name="map:GetCDDetailsAccInputMap_req_12">
              <xsl:with-param name="body" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="body" mode="map:GetCDDetailsAccInputMap_req_1">
        </xsl:apply-templates>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:GetCDDetailsAccInputMap_req_1">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out6:fetchCDDetailsRAS'"/>
      </xsl:attribute>
      <out5:fetchCDDetailsRAS>
        <!-- a simple data mapping: "in:findCdDetailsAcc/GCInputs/source"(string) to "out5:source"(string) -->
        <xsl:if test="in:findCdDetailsAcc/GCInputs/source">
          <xsl:element name="out5:source">
            <xsl:value-of select="in:findCdDetailsAcc/GCInputs/source"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "in:findCdDetailsAcc/GCInputs/medium"(string) to "out5:medium"(string) -->
        <xsl:if test="in:findCdDetailsAcc/GCInputs/medium">
          <xsl:element name="out5:medium">
            <xsl:value-of select="in:findCdDetailsAcc/GCInputs/medium"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "in:findCdDetailsAcc/GCInputs/campaign"(string) to "out5:campaign"(string) -->
        <xsl:if test="in:findCdDetailsAcc/GCInputs/campaign">
          <xsl:element name="out5:campaign">
            <xsl:value-of select="in:findCdDetailsAcc/GCInputs/campaign"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "in:findCdDetailsAcc/GCInputs/strServiceToken"(string) to "out5:strServiceToken"(string) -->
        <xsl:if test="in:findCdDetailsAcc/GCInputs/strServiceToken">
          <xsl:element name="out5:strServiceToken">
            <xsl:value-of select="in:findCdDetailsAcc/GCInputs/strServiceToken"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "in:findCdDetailsAcc/policyNumber"(string) to "out5:PolicyNo"(string) -->
        <xsl:if test="in:findCdDetailsAcc/policyNumber">
          <xsl:element name="out5:PolicyNo">
            <xsl:value-of select="in:findCdDetailsAcc/policyNumber"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "in:findCdDetailsAcc/proposalNumber"(string) to "out5:ProposalNo"(string) -->
        <xsl:if test="in:findCdDetailsAcc/proposalNumber">
          <xsl:element name="out5:ProposalNo">
            <xsl:value-of select="in:findCdDetailsAcc/proposalNumber"/>
          </xsl:element>
        </xsl:if>
      </out5:fetchCDDetailsRAS>
    </body>
  </xsl:template>

  <!-- This rule represents a type mapping: "body" to "body".  -->
  <xsl:template name="map:GetCDDetailsAccInputMap_req_12">
    <xsl:param name="body"/>
    <out5:fetchCDDetailsRAS>
      <!-- a simple data mapping: "$body/in:findCdDetailsAcc/GCInputs/source"(string) to "out5:source"(string) -->
      <xsl:if test="$body/in:findCdDetailsAcc/GCInputs/source">
        <xsl:element name="out5:source">
          <xsl:value-of select="$body/in:findCdDetailsAcc/GCInputs/source"/>
        </xsl:element>
      </xsl:if>
      <!-- a simple data mapping: "$body/in:findCdDetailsAcc/GCInputs/medium"(string) to "out5:medium"(string) -->
      <xsl:if test="$body/in:findCdDetailsAcc/GCInputs/medium">
        <xsl:element name="out5:medium">
          <xsl:value-of select="$body/in:findCdDetailsAcc/GCInputs/medium"/>
        </xsl:element>
      </xsl:if>
      <!-- a simple data mapping: "$body/in:findCdDetailsAcc/GCInputs/campaign"(string) to "out5:campaign"(string) -->
      <xsl:if test="$body/in:findCdDetailsAcc/GCInputs/campaign">
        <xsl:element name="out5:campaign">
          <xsl:value-of select="$body/in:findCdDetailsAcc/GCInputs/campaign"/>
        </xsl:element>
      </xsl:if>
      <!-- a simple data mapping: "$body/in:findCdDetailsAcc/GCInputs/strServiceToken"(string) to "out5:strServiceToken"(string) -->
      <xsl:if test="$body/in:findCdDetailsAcc/GCInputs/strServiceToken">
        <xsl:element name="out5:strServiceToken">
          <xsl:value-of select="$body/in:findCdDetailsAcc/GCInputs/strServiceToken"/>
        </xsl:element>
      </xsl:if>
      <!-- a simple data mapping: "$body/in:findCdDetailsAcc/policyNumber"(string) to "out5:PolicyNo"(string) -->
      <xsl:if test="$body/in:findCdDetailsAcc/policyNumber">
        <xsl:element name="out5:PolicyNo">
          <xsl:value-of select="$body/in:findCdDetailsAcc/policyNumber"/>
        </xsl:element>
      </xsl:if>
      <!-- a simple data mapping: "$body/in:findCdDetailsAcc/proposalNumber"(string) to "out5:ProposalNo"(string) -->
      <xsl:if test="$body/in:findCdDetailsAcc/proposalNumber">
        <xsl:element name="out5:ProposalNo">
          <xsl:value-of select="$body/in:findCdDetailsAcc/proposalNumber"/>
        </xsl:element>
      </xsl:if>
    </out5:fetchCDDetailsRAS>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
