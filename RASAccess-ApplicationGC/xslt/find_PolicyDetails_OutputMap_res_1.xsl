<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/find_PolicyDetails_OutputMap_res_1.map" md5sum="cda2d4e63efd9ece78703371761bbd36" version="8.0.501" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM Graphical Data Mapping Editor.
*   Version 8.0.5.0
*
*   Mapping file:		find_PolicyDetails_OutputMap_res_1.map
*   Map declaration(s):	find_PolicyDetails_OutputMap_res_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FAccess-ApplicationGC%257DcorrelationBO/message%3D%257Bhttp%253A%252F%252Fstub.tagicesb.com%252Fwsdl%252FRASGenericService%252F%257DpolicyDetailsResponse/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FAccess-ApplicationGC%257DcorrelationBO/message%3D%257Bhttp%253A%252F%252FGCDomain-v1.0.0%252Forg%252Ftataaig%252Faccess%252FRetrieveAccessGC%257DfindPolicyDetailsResponseMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:in2="wsdl.http://stub.tagicesb.com/wsdl/RASGenericService/"
    xmlns:in3="http://stub.tagicesb.com/wsdl/RASGenericService/"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io4="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:in="WebService_RefundDetails"
    xmlns:io="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:out3="wsdl.http://GCDomain-v1.0.0/org/tataaig/access/RetrieveAccessGC"
    xmlns:out2="http://RACASBO"
    xmlns:out5="http://GCDomain-v1.0.0/org/tataaig/access/RetrieveAccessGC"
    xmlns:out4="http://GCLibrary/org/aig/access/BO"
    xmlns:out="http://GCLibrary/org/aig/access/bo"
    xmlns:MapUtils="xalan://com.ibm.wbiserver.transform.util.MapUtils"
    xmlns:map="http://Access-ApplicationGC/xslt/find_PolicyDetails_OutputMap_res_1"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="date str exsl set math MapUtils map xalan msl"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'out3:findPolicyDetailsResponseMsg'"/>
            </xsl:attribute>
            <xsl:call-template name="map:find_PolicyDetails_OutputMap_res_12">
              <xsl:with-param name="body" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="body" mode="map:find_PolicyDetails_OutputMap_res_1">
        </xsl:apply-templates>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:find_PolicyDetails_OutputMap_res_1">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out3:findPolicyDetailsResponseMsg'"/>
      </xsl:attribute>
      <out5:findPolicyDetailsResponse>
        <policyDetails>
          <!-- a for-each transform: "in:PolicyDetails"(PolicyDetails) to "out2:payload"(PolicyBO) -->
          <xsl:apply-templates select="in3:policyDetailsResponse/in:PolicyDetailsResponse/in:PolicyDetailsResult/in:PolicyDetails" mode="localPolicyDetailsToPayload_1610775091">
          </xsl:apply-templates>
        </policyDetails>
      </out5:findPolicyDetailsResponse>
    </body>
  </xsl:template>

  <!-- This rule represents a type mapping: "body" to "body".  -->
  <xsl:template name="map:find_PolicyDetails_OutputMap_res_12">
    <xsl:param name="body"/>
    <out5:findPolicyDetailsResponse>
      <policyDetails>
        <!-- a for-each transform: "in:PolicyDetails"(PolicyDetails) to "out2:payload"(PolicyBO) -->
        <xsl:apply-templates select="$body/in3:policyDetailsResponse/in:PolicyDetailsResponse/in:PolicyDetailsResult/in:PolicyDetails" mode="localPolicyDetailsToPayload_1610775091">
        </xsl:apply-templates>
      </policyDetails>
    </out5:findPolicyDetailsResponse>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in:PolicyDetails" to "out2:payload".  -->
  <xsl:template match="in:PolicyDetails"  mode="localPolicyDetailsToPayload_1610775091">
    <out2:payload>
      <!-- a simple data mapping: "in:ProposalNo"(string) to "out2:proposalNo"(string) -->
      <xsl:if test="in:ProposalNo">
        <out2:proposalNo>
          <xsl:value-of select="in:ProposalNo"/>
        </out2:proposalNo>
      </xsl:if>
      <!-- a simple data mapping: "in:Product"(string) to "out2:product"(string) -->
      <xsl:if test="in:Product">
        <out2:product>
          <xsl:value-of select="in:Product"/>
        </out2:product>
      </xsl:if>
      <!-- a simple data mapping: "in:ProposerName"(string) to "out2:proposerName"(string) -->
      <xsl:if test="in:ProposerName">
        <out2:proposerName>
          <xsl:value-of select="in:ProposerName"/>
        </out2:proposerName>
      </xsl:if>
      <!-- a simple data mapping: "in:AadhaarNumber"(string) to "out2:aadharNo"(string) -->
      <xsl:if test="in:AadhaarNumber">
        <out2:aadharNo>
          <xsl:value-of select="in:AadhaarNumber"/>
        </out2:aadharNo>
      </xsl:if>
      <!-- a simple data mapping: "in:PolicyPremium"(string) to "out2:policyPremium"(double) -->
      <xsl:if test="in:PolicyPremium">
        <out2:policyPremium>
          <!-- variables for custom code -->
          <xsl:variable name="PolicyPremium" select="in:PolicyPremium"/>
          <xsl:value-of select="MapUtils:stringToDouble($PolicyPremium, '0.0')"/>
        </out2:policyPremium>
      </xsl:if>
      <!-- a simple data mapping: "in:ProducerCode"(string) to "out2:producerCode"(string) -->
      <xsl:if test="in:ProducerCode">
        <out2:producerCode>
          <xsl:value-of select="in:ProducerCode"/>
        </out2:producerCode>
      </xsl:if>
      <!-- a simple data mapping: "in:ProducerName"(string) to "out2:producerName"(string) -->
      <xsl:if test="in:ProducerName">
        <out2:producerName>
          <xsl:value-of select="in:ProducerName"/>
        </out2:producerName>
      </xsl:if>
      <!-- a simple data mapping: "in:PolicyStatus"(string) to "out2:policyStatus"(string) -->
      <xsl:if test="in:PolicyStatus">
        <out2:policyStatus>
          <xsl:value-of select="in:PolicyStatus"/>
        </out2:policyStatus>
      </xsl:if>
      <!-- a simple data mapping: "in:LANNumber"(string) to "out2:lanNumber"(string) -->
      <xsl:if test="in:LANNumber">
        <out2:lanNumber>
          <xsl:value-of select="in:LANNumber"/>
        </out2:lanNumber>
      </xsl:if>
      <!-- a simple data mapping: "in:ApplicationDate"(string) to "out2:applicationDate"(dateTime) -->
      <xsl:if test="in:ApplicationDate">
        <out2:applicationDate>
          <!-- variables for custom code -->
          <xsl:variable name="ApplicationDate" select="in:ApplicationDate"/>
          <xsl:value-of select="MapUtils:stringToDateTime($ApplicationDate, '2002-01-01T11:00:00')"/>
        </out2:applicationDate>
      </xsl:if>
      <!-- a simple data mapping: "in:PolicyStartDate"(string) to "out2:policyStartDate"(dateTime) -->
      <xsl:if test="in:PolicyStartDate">
        <out2:policyStartDate>
          <!-- variables for custom code -->
          <xsl:variable name="PolicyStartDate" select="in:PolicyStartDate"/>
          <xsl:value-of select="MapUtils:stringToDateTime($PolicyStartDate, '2002-01-01T11:00:00')"/>
        </out2:policyStartDate>
      </xsl:if>
      <!-- a simple data mapping: "in:PolicyEndDate"(string) to "out2:policyEndDate"(dateTime) -->
      <xsl:if test="in:PolicyEndDate">
        <out2:policyEndDate>
          <!-- variables for custom code -->
          <xsl:variable name="PolicyEndDate" select="in:PolicyEndDate"/>
          <xsl:value-of select="MapUtils:stringToDateTime($PolicyEndDate, '2002-01-01T11:00:00')"/>
        </out2:policyEndDate>
      </xsl:if>
      <!-- a for-each transform: "in:InsuredDetails"(InsuredDetails) to "out2:insuredBO"(InsuredBO) -->
      <xsl:apply-templates select="in:objInsuredDetails/in:InsuredDetails" mode="localInsuredDetailsToInsuredBO_650416563">
      </xsl:apply-templates>
      <!-- a for-each transform: "in:CRSDetails"(CRSDetails) to "out2:crs"(ReceiptBO) -->
      <xsl:apply-templates select="in:objCRSDetails/in:CRSDetails" mode="localCRSDetailsToCrs_1874542620">
      </xsl:apply-templates>
      <out2:customerAccount>
        <!-- a simple data mapping: "in:CustomerName"(string) to "out2:customerName"(string) -->
        <xsl:if test="in:CustomerName">
          <xsl:element name="out2:customerName">
            <xsl:value-of select="in:CustomerName"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "in:CustomerBank"(string) to "out2:customerBank"(string) -->
        <xsl:if test="in:CustomerBank">
          <xsl:element name="out2:customerBank">
            <xsl:value-of select="in:CustomerBank"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "in:CustomerIFSCcode"(string) to "out2:customerIfscCode"(string) -->
        <xsl:if test="in:CustomerIFSCcode">
          <xsl:element name="out2:customerIfscCode">
            <xsl:value-of select="in:CustomerIFSCcode"/>
          </xsl:element>
        </xsl:if>
        <!-- a simple data mapping: "in:CustomerBankAccountNumber"(string) to "out2:bankAccountNo"(string) -->
        <xsl:if test="in:CustomerBankAccountNumber">
          <xsl:element name="out2:bankAccountNo">
            <xsl:value-of select="in:CustomerBankAccountNumber"/>
          </xsl:element>
        </xsl:if>
      </out2:customerAccount>
      <!-- a simple data mapping: "in:AgreedPremiumAmount"(string) to "out2:aggreedPremiumAmount"(double) -->
      <xsl:if test="in:AgreedPremiumAmount">
        <out2:aggreedPremiumAmount>
          <!-- variables for custom code -->
          <xsl:variable name="AgreedPremiumAmount" select="in:AgreedPremiumAmount"/>
          <xsl:value-of select="MapUtils:stringToDouble($AgreedPremiumAmount, '0.0')"/>
        </out2:aggreedPremiumAmount>
      </xsl:if>
      <!-- a simple data mapping: "in:EngineNo"(string) to "out2:engineNumber"(string) -->
      <xsl:if test="in:EngineNo">
        <out2:engineNumber>
          <xsl:value-of select="in:EngineNo"/>
        </out2:engineNumber>
      </xsl:if>
      <!-- a simple data mapping: "in:ChasisNo"(string) to "out2:chasisNumber"(string) -->
      <xsl:if test="in:ChasisNo">
        <out2:chasisNumber>
          <xsl:value-of select="in:ChasisNo"/>
        </out2:chasisNumber>
      </xsl:if>
      <!-- a simple data mapping: "in:DealerName"(string) to "out2:dealerName"(string) -->
      <xsl:if test="in:DealerName">
        <out2:dealerName>
          <xsl:value-of select="in:DealerName"/>
        </out2:dealerName>
      </xsl:if>
      <!-- a simple data mapping: "in:DealerCode"(string) to "out2:dealerCode"(string) -->
      <xsl:if test="in:DealerCode">
        <out2:dealerCode>
          <xsl:value-of select="in:DealerCode"/>
        </out2:dealerCode>
      </xsl:if>
      <!-- a simple data mapping: "in:FinancierName"(string) to "out2:financierName"(string) -->
      <xsl:if test="in:FinancierName">
        <out2:financierName>
          <xsl:value-of select="in:FinancierName"/>
        </out2:financierName>
      </xsl:if>
      <!-- a simple data mapping: "in:FinancierCode"(string) to "out2:financierCode"(string) -->
      <xsl:if test="in:FinancierCode">
        <out2:financierCode>
          <xsl:value-of select="in:FinancierCode"/>
        </out2:financierCode>
      </xsl:if>
      <!-- a simple data mapping: "in:PolicyStartTime"(string) to "out2:policyStartTime"(string) -->
      <xsl:if test="in:PolicyStartTime">
        <out2:policyStartTime>
          <xsl:value-of select="in:PolicyStartTime"/>
        </out2:policyStartTime>
      </xsl:if>
      <!-- a simple data mapping: "in:RegistrationNumber"(string) to "out2:registrationNo"(string) -->
      <xsl:if test="in:RegistrationNumber">
        <out2:registrationNo>
          <xsl:value-of select="in:RegistrationNumber"/>
        </out2:registrationNo>
      </xsl:if>
      <!-- a simple data mapping: "in:CustomerCode"(string) to "out2:customerCode"(string) -->
      <xsl:if test="in:CustomerCode">
        <out2:customerCode>
          <xsl:value-of select="in:CustomerCode"/>
        </out2:customerCode>
      </xsl:if>
      <!-- a simple data mapping: "in:PolicyCoverVariant"(string) to "out2:policyCoverType"(string) -->
      <xsl:if test="in:PolicyCoverVariant">
        <out2:policyCoverType>
          <xsl:value-of select="in:PolicyCoverVariant"/>
        </out2:policyCoverType>
      </xsl:if>
      <!-- a simple data mapping: "in:ConversionDate"(string) to "out2:conversionDate"(dateTime) -->
      <xsl:if test="in:ConversionDate">
        <out2:conversionDate>
          <!-- variables for custom code -->
          <xsl:variable name="ConversionDate" select="in:ConversionDate"/>
          <xsl:value-of select="MapUtils:stringToDateTime($ConversionDate, '2002-01-01T11:00:00')"/>
        </out2:conversionDate>
      </xsl:if>
    </out2:payload>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in:InsuredDetails" to "out2:insuredBO".  -->
  <xsl:template match="in:InsuredDetails"  mode="localInsuredDetailsToInsuredBO_650416563">
    <out2:insuredBO>
      <!-- a simple data mapping: "in:InsuredName"(string) to "out2:name"(string) -->
      <xsl:if test="in:InsuredName">
        <out2:name>
          <xsl:value-of select="in:InsuredName"/>
        </out2:name>
      </xsl:if>
      <!-- a simple data mapping: "in:InsuredDOB"(string) to "out2:dob"(dateTime) -->
      <xsl:if test="in:InsuredDOB">
        <out2:dob>
          <!-- variables for custom code -->
          <xsl:variable name="InsuredDOB" select="in:InsuredDOB"/>
          <xsl:value-of select="MapUtils:stringToDateTime($InsuredDOB, '2002-01-01T11:00:00')"/>
        </out2:dob>
      </xsl:if>
      <!-- a simple data mapping: "in:InsuredContAdd"(string) to "out2:address"(string) -->
      <xsl:if test="in:InsuredContAdd">
        <out2:address>
          <xsl:value-of select="in:InsuredContAdd"/>
        </out2:address>
      </xsl:if>
      <!-- a simple data mapping: "in:InsuredContNo"(string) to "out2:contactNo"(string) -->
      <xsl:if test="in:InsuredContNo">
        <out2:contactNo>
          <xsl:value-of select="in:InsuredContNo"/>
        </out2:contactNo>
      </xsl:if>
    </out2:insuredBO>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in:CRSDetails" to "out2:crs".  -->
  <xsl:template match="in:CRSDetails"  mode="localCRSDetailsToCrs_1874542620">
    <out2:crs>
      <!-- a simple data mapping: "in:CRS"(string) to "out2:crsNo"(string) -->
      <xsl:if test="in:CRS">
        <out2:crsNo>
          <xsl:value-of select="in:CRS"/>
        </out2:crsNo>
      </xsl:if>
      <!-- a simple data mapping: "in:AuthcodeTransactionNo"(string) to "out2:authCode"(string) -->
      <xsl:if test="in:AuthcodeTransactionNo">
        <out2:authCode>
          <xsl:value-of select="in:AuthcodeTransactionNo"/>
        </out2:authCode>
      </xsl:if>
      <!-- a simple data mapping: "in:Status"(string) to "out2:crsStatus"(string) -->
      <xsl:if test="in:Status">
        <out2:crsStatus>
          <xsl:value-of select="in:Status"/>
        </out2:crsStatus>
      </xsl:if>
      <!-- a simple data mapping: "in:CRSAmount"(string) to "out2:crsAmount"(double) -->
      <xsl:if test="in:CRSAmount">
        <out2:crsAmount>
          <!-- variables for custom code -->
          <xsl:variable name="CRSAmount" select="in:CRSAmount"/>
          <xsl:value-of select="MapUtils:stringToDouble($CRSAmount, '0.0')"/>
        </out2:crsAmount>
      </xsl:if>
      <!-- a simple data mapping: "in:CRSPayerName"(string) to "out2:payeeName"(string) -->
      <xsl:if test="in:CRSPayerName">
        <out2:payeeName>
          <xsl:value-of select="in:CRSPayerName"/>
        </out2:payeeName>
      </xsl:if>
      <!-- a simple data mapping: "in:PaymentReceivedMethod"(string) to "out2:paymentReceivedMethod"(string) -->
      <xsl:if test="in:PaymentReceivedMethod">
        <out2:paymentReceivedMethod>
          <xsl:value-of select="in:PaymentReceivedMethod"/>
        </out2:paymentReceivedMethod>
      </xsl:if>
    </out2:crs>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
