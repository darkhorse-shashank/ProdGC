<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/find_Receipts_OutputMap_res_1.map" md5sum="e36f882df234d0d989e886f0d36a63c8" version="8.0.501" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM Graphical Data Mapping Editor.
*   Version 8.0.5.0
*
*   Mapping file:		find_Receipts_OutputMap_res_1.map
*   Map declaration(s):	find_Receipts_OutputMap_res_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FAccess-ApplicationGC%257DcorrelationBO/message%3D%257Bhttp%253A%252F%252Fstub.tagicesb.com%252Fwsdl%252FRASGenericService%252F%257DreceiptDetailsResponse/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FAccess-ApplicationGC%257DcorrelationBO/message%3D%257Bhttp%253A%252F%252FGCDomain-v1.0.0%252Forg%252Ftataaig%252Faccess%252FRetrieveAccessGC%257DfindReceiptsResponseMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:in2="wsdl.http://stub.tagicesb.com/wsdl/RASGenericService/"
    xmlns:in3="http://stub.tagicesb.com/wsdl/RASGenericService/"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io4="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:in="WebService_RefundDetails"
    xmlns:io="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:out3="http://GCLibrary/org/aig/access/BO"
    xmlns:out2="wsdl.http://GCDomain-v1.0.0/org/tataaig/access/RetrieveAccessGC"
    xmlns:out4="http://GCDomain-v1.0.0/org/tataaig/access/RetrieveAccessGC"
    xmlns:out="http://RACASBO"
    xmlns:out5="http://GCLibrary/org/aig/access/bo"
    xmlns:MapUtils="xalan://com.ibm.wbiserver.transform.util.MapUtils"
    xmlns:map="http://Access-ApplicationGC/xslt/find_Receipts_OutputMap_res_1"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="date str exsl set math MapUtils map xalan msl"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'out2:findReceiptsResponseMsg'"/>
            </xsl:attribute>
            <xsl:call-template name="map:find_Receipts_OutputMap_res_12">
              <xsl:with-param name="body" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="body" mode="map:find_Receipts_OutputMap_res_1">
        </xsl:apply-templates>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:find_Receipts_OutputMap_res_1">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out2:findReceiptsResponseMsg'"/>
      </xsl:attribute>
      <out4:findReceiptsResponse>
        <receiptDetails>
          <!-- a for-each transform: "in:ReceiptDetails"(ReceiptDetails) to "out:receiptDetail"(ReceiptBO) -->
          <xsl:apply-templates select="in3:receiptDetailsResponse/in3:ReceiptDetailsResult/in:ReceiptDetails" mode="localReceiptDetailsToReceiptDetail_901313142">
          </xsl:apply-templates>
        </receiptDetails>
      </out4:findReceiptsResponse>
    </body>
  </xsl:template>

  <!-- This rule represents a type mapping: "body" to "body".  -->
  <xsl:template name="map:find_Receipts_OutputMap_res_12">
    <xsl:param name="body"/>
    <out4:findReceiptsResponse>
      <receiptDetails>
        <!-- a for-each transform: "in:ReceiptDetails"(ReceiptDetails) to "out:receiptDetail"(ReceiptBO) -->
        <xsl:apply-templates select="$body/in3:receiptDetailsResponse/in3:ReceiptDetailsResult/in:ReceiptDetails" mode="localReceiptDetailsToReceiptDetail_901313142">
        </xsl:apply-templates>
      </receiptDetails>
    </out4:findReceiptsResponse>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in:ReceiptDetails" to "out:receiptDetail".  -->
  <xsl:template match="in:ReceiptDetails"  mode="localReceiptDetailsToReceiptDetail_901313142">
    <out:receiptDetail>
      <!-- a simple data mapping: "in:CRSNumber"(string) to "out:crsNo"(string) -->
      <xsl:if test="in:CRSNumber">
        <out:crsNo>
          <xsl:value-of select="in:CRSNumber"/>
        </out:crsNo>
      </xsl:if>
      <!-- a simple data mapping: "in:AuthCDTransDtls"(string) to "out:authCode"(string) -->
      <xsl:if test="in:AuthCDTransDtls">
        <out:authCode>
          <xsl:value-of select="in:AuthCDTransDtls"/>
        </out:authCode>
      </xsl:if>
      <!-- a simple data mapping: "in:CRSStatus"(string) to "out:crsStatus"(string) -->
      <xsl:if test="in:CRSStatus">
        <out:crsStatus>
          <xsl:value-of select="in:CRSStatus"/>
        </out:crsStatus>
      </xsl:if>
      <!-- a simple data mapping: "in:CRSAmount"(string) to "out:crsAmount"(double) -->
      <xsl:if test="in:CRSAmount">
        <out:crsAmount>
          <!-- variables for custom code -->
          <xsl:variable name="CRSAmount" select="in:CRSAmount"/>
          <xsl:value-of select="MapUtils:stringToDouble($CRSAmount, '0.0')"/>
        </out:crsAmount>
      </xsl:if>
      <!-- a simple data mapping: "in:CRSPayerName"(string) to "out:payeeName"(string) -->
      <xsl:if test="in:CRSPayerName">
        <out:payeeName>
          <xsl:value-of select="in:CRSPayerName"/>
        </out:payeeName>
      </xsl:if>
      <!-- a simple data mapping: "in:ReceiptMode"(string) to "out:paymentReceivedMethod"(string) -->
      <xsl:if test="in:ReceiptMode">
        <out:paymentReceivedMethod>
          <xsl:value-of select="in:ReceiptMode"/>
        </out:paymentReceivedMethod>
      </xsl:if>
      <!-- a simple data mapping: "in:BalanceAmount"(string) to "out:balanceAmount"(double) -->
      <xsl:if test="in:BalanceAmount">
        <out:balanceAmount>
          <!-- variables for custom code -->
          <xsl:variable name="BalanceAmount" select="in:BalanceAmount"/>
          <xsl:value-of select="MapUtils:stringToDouble($BalanceAmount, '0.0')"/>
        </out:balanceAmount>
      </xsl:if>
      <!-- a simple data mapping: "in:CRSPayerID"(string) to "out:CRSPayerID"(string) -->
      <xsl:if test="in:CRSPayerID">
        <out:CRSPayerID>
          <xsl:value-of select="in:CRSPayerID"/>
        </out:CRSPayerID>
      </xsl:if>
      <!-- a simple data mapping: "in:ReceiptDate"(string) to "out:receiptDate"(dateTime) -->
      <xsl:if test="in:ReceiptDate">
        <out:receiptDate>
          <!-- variables for custom code -->
          <xsl:variable name="ReceiptDate" select="in:ReceiptDate"/>
          <xsl:value-of select="MapUtils:stringToDateTime($ReceiptDate, '2002-01-01T11:00:00')"/>
        </out:receiptDate>
      </xsl:if>
    </out:receiptDetail>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
